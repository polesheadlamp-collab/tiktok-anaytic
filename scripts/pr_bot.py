#!/usr/bin/env python3
import os, re, subprocess, json, pathlib, sys
REPO = pathlib.Path(__file__).resolve().parents[1]

DOCS = [
  ("docs/00-BRD.md","BRD"),
  ("docs/01-FRD.md","FRD"),
  ("docs/02-FSD.md","FSD"),
  ("docs/03-TSD.md","TSD"),
  ("docs/04-UserGuide.md","USERGUIDE"),
]

# Heuristik sederhana: baca heading & bullet â†’ turunkan task
def derive_tasks():
  tasks=[]
  for f,tag in DOCS:
    p=REPO/f
    if not p.exists(): 
      tasks.append({"slug":f"missing-{tag.lower()}", "title":f"{tag}: add content skeleton", "files":[str(p)], "kind":"docs"})
      continue
    txt=p.read_text(errors="ignore")
    # ambil 8 baris pertama heading/bullet
    lines=[l.strip() for l in txt.splitlines() if l.strip().startswith(('#','-','*','1.','2.'))][:20]
    base = f"{tag}: " + (re.sub(r'[#*\-\d.\s]+','',lines[0]) if lines else "task")
    # definisi minimal task per dok
    if tag=="FSD":
      tasks += [
        {"slug":"api-contract", "title":f"{tag}: API contract & routes", "files":["src/api/README.md","src/api/routes/__init__.py"], "kind":"backend"},
        {"slug":"ingest-pipeline", "title":f"{tag}: ingest pipeline skeleton", "files":["src/ingest/README.md","src/ingest/__init__.py"], "kind":"data"},
      ]
    elif tag=="TSD":
      tasks += [
        {"slug":"test-harness", "title":f"{tag}: test harness & CI", "files":["tests/test_smoke.py",".github/workflows/ci.yml"], "kind":"ci"},
      ]
    elif tag=="USERGUIDE":
      tasks += [
        {"slug":"docs-site", "title":f"{tag}: docs site skeleton", "files":["docs/INDEX.md"], "kind":"docs"},
      ]
    elif tag=="FRD":
      tasks += [
        {"slug":"ui-screens", "title":f"{tag}: UI screens skeleton", "files":["src/ui/README.md","src/ui/screens.md"], "kind":"frontend"},
      ]
    elif tag=="BRD":
      tasks += [
        {"slug":"arch", "title":f"{tag}: architecture & ADR", "files":["docs/ADR/0001-architecture.md"], "kind":"docs"},
      ]
  # unikkan by slug
  seen=set(); uniq=[]
  for t in tasks:
    s=t["slug"]
    if s in seen: continue
    seen.add(s); uniq.append(t)
  return uniq

def git(*args, check=True, cwd=None):
  cwd = cwd or REPO
  return subprocess.run(["git",*args], cwd=cwd, check=check, text=True, capture_output=True)

def ensure_files(files, kind, title):
  for fp in files:
    p=(REPO/fp)
    p.parent.mkdir(parents=True, exist_ok=True)
    if not p.exists():
      if fp.endswith(".py"): p.write_text("# auto-generated by PR Bot\n")
      elif fp.endswith(".md"): p.write_text(f"# {title}\n\n_Auto-generated scaffold by PR Bot._\n")
      elif fp.endswith(".yml") and "ci.yml" in fp:
        p.write_text("""name: CI
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.10' }
      - run: pip install pytest
      - run: pytest -q
""")
      else:
        p.write_text("auto-generated\n")

def branch_slug(s): 
  s=s.lower(); s=re.sub(r'[^a-z0-9]+','-',s).strip('-'); 
  return s[:60] if len(s)>60 else s

def main():
  tasks = derive_tasks()
  if not tasks:
    print("No tasks derived"); return
  # pastikan remote ok
  try:
    git("fetch","origin")
  except Exception as e:
    print("git fetch failed:", e); sys.exit(1)

  created=0
  for t in tasks:
    b=f"robot/{branch_slug(t['slug'])}"
    # skip jika PR sudah ada (branch sudah ada di remote)
    ls=git("ls-remote","--heads","origin",b, check=False)
    if ls.returncode==0 and ls.stdout.strip():
      print(f"= skip (exists): {b}")
      continue
    # buat branch dari main terbaru
    git("checkout","-f","main")
    git("pull","--rebase","origin","main")
    git("checkout","-B",b)
    ensure_files(t["files"], t["kind"], t["title"])
    git("add",".")
    msg=f"feat({t['kind']}): {t['title']} (Part of POL-101)"
    git("commit","-m",msg)
    # push via SSH remote
    git("push","-u","origin",b)
    print(f"+ pushed: {b}")
    created+=1

  print(json.dumps({"created":created,"total":len(tasks)}, indent=2))

if __name__=="__main__":
  main()
