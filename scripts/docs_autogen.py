#!/usr/bin/env python3
import os, subprocess, pathlib, re, sys, json

REPO = pathlib.Path(__file__).resolve().parents[1]
SRC  = pathlib.Path(os.environ.get("TAAIS_PDF_DIR", str(pathlib.Path.home()/"taais_pdfs")))
DOCS = REPO/"docs"
DOCS.mkdir(exist_ok=True, parents=True)

MAP = {
  "BRD.pdf": "00-BRD.md",
  "FRD.pdf": "01-FRD.md",
  "FSD.pdf": "02-FSD.md",
  "TSD.pdf": "03-TSD.md",
  "UserGuide.pdf": "04-UserGuide.md",
}

HEADER = """# {title}
Linked: [BRD](00-BRD.md) | [FRD](01-FRD.md) | [FSD](02-FSD.md) | [TSD](03-TSD.md) | [User Guide](04-UserGuide.md)

> Generated by Robot from PDF source. Edit PDF → robot update MD.
"""

def pdftotext(pdf_path: pathlib.Path) -> str:
    try:
        out = subprocess.check_output(["pdftotext", "-layout", str(pdf_path), "-"], text=True, stderr=subprocess.STDOUT)
        return out
    except subprocess.CalledProcessError as e:
        print("pdftotext error:", e.output, file=sys.stderr)
        return ""

def clean(txt: str) -> str:
    # Bersihin spasi aneh & header/footer sederhana
    lines = [re.sub(r'[ \t]+$', '', ln) for ln in txt.splitlines()]
    # hapus baris kosong berturut panjang
    out = []
    blank = 0
    for ln in lines:
        if ln.strip()=="":
            blank+=1
            if blank<=2: out.append("")
        else:
            blank=0
            out.append(ln)
    return "\n".join(out).strip()

def to_md(title: str, body: str) -> str:
    body = clean(body)
    # heuristik heading
    body = re.sub(r'(?m)^\s*([A-Z][A-Za-z0-9 /_-]{3,})\s*:$', r'## \1', body)
    return HEADER.format(title=title) + "\n\n" + body + "\n"

def write_if_changed(path: pathlib.Path, content: str) -> bool:
    if path.exists():
        old = path.read_text(encoding="utf-8", errors="ignore")
        if old.strip() == content.strip():
            return False
    path.write_text(content, encoding="utf-8")
    return True

changed = []
for pdf_name, md_name in MAP.items():
    pdf = SRC/pdf_name
    md  = DOCS/md_name
    title = md_name.replace("-", " ").replace(".md","")
    if pdf.exists():
        text = pdftotext(pdf)
        if not text.strip():
            print(f"⚠️ Kosong/ gagal ekstrak: {pdf}")
            continue
        md_content = to_md(title, text)
        if write_if_changed(md, md_content):
            changed.append(str(md.relative_to(REPO)))
    else:
        # kalau belum ada PDF, jangan gagal — biarkan file MD tetap ada
        if not md.exists():
            md.write_text(HEADER.format(title=title)+"\n\n_TODO: isi dari PDF belum tersedia._\n", encoding="utf-8")
            changed.append(str(md.relative_to(REPO)))

if changed:
    # Commit + push
    try:
        subprocess.run(["git","add"]+changed, cwd=str(REPO), check=True)
        msg = "docs: auto-sync from PDF (Part of POL-101)"
        subprocess.run(["git","commit","-m",msg], cwd=str(REPO), check=False)
        subprocess.run(["git","pull","--rebase","origin","main"], cwd=str(REPO), check=False)
        subprocess.run(["git","push","-u","origin","main"], cwd=str(REPO), check=False)
        print("✅ Updated & pushed:", ", ".join(changed))
    except Exception as e:
        print("⚠️ Git push error:", e)
else:
    print("ℹ️ Tidak ada perubahan pada docs.")
